<?php


namespace uujia\framework\base\common\lib\Event\Cache;

use uujia\framework\base\common\consts\EventConst;
use uujia\framework\base\common\lib\Annotation\EventListener;
use uujia\framework\base\common\lib\Annotation\EventTrigger;
use uujia\framework\base\common\lib\Cache\CacheDataProvider;
use uujia\framework\base\common\lib\Event\Name\EventName;
use uujia\framework\base\common\lib\Utils\Json;
use uujia\framework\base\common\lib\Utils\Reflection as UUReflection;

/**
 * Class EventCacheDataProvider
 *
 * @package uujia\framework\base\common\lib\Event\Cache
 */
abstract class EventCacheDataProvider extends CacheDataProvider {
	
	/**
	 * 事件名称管理对象
	 *
	 * @var EventName
	 */
	protected $_eventNameObj = null;
	
	
	/**
	 * EventCacheData constructor.
	 *
	 * @param EventName $eventNameObj
	 */
	public function __construct(EventName $eventNameObj = null) {
		$this->_eventNameObj = $eventNameObj;
		
		parent::__construct();
	}
	
	/**
	 * 复位 属性归零
	 *
	 * @param array $exclude
	 *
	 * @return $this
	 */
	public function reset($exclude = []) {
		(!in_array('eventNameObj', $exclude)) && $this->getEventNameObj()->reset($exclude['eventNameObjExclude'] ?? []);
		
		return parent::reset($exclude);
	}
	
	/**************************************************************
	 * data
	 **************************************************************/
	
	/**
	 * 获取收集事件类名集合
	 *
	 * @return \Generator
	 */
	public function getEventClassNames() {
		yield [];
	}
	
	/**
	 * 加载事件类
	 *
	 */
	public function loadEventHandle() {
		$refObj = new UUReflection('', '', UUReflection::ANNOTATION_OF_CLASS);
		
		foreach ($this->getEventClassNames() as $itemClassName) {
			$refObj
				->setClassName($itemClassName)
				->load();
			
			$_refMethods = $refObj
				->methods(UUReflection::METHOD_OF_PUBLIC);
			
			$_evtListener = $refObj
				->annotation(EventListener::class)
				->getAnnotationObjs();
			
			$_evtTrigger = $refObj
				->annotation(EventTrigger::class)
				->getAnnotationObjs();
			
			$result = [
				'publicMethods' => $_refMethods,
				'listener' => $_evtListener,
				'trigger' => $_evtTrigger,
			];
			
			yield $result;
		}
	}
	
	/**
	 * 构建缓存Key
	 *
	 * @return string
	 */
	public function makeCacheKey() {
		// todo: 将事件属性转成前缀数组
		
		
		return parent::makeCacheKey(); // TODO: Change the autogenerated stub
	}
	
	/**
	 * 构建数据 写入缓存
	 *
	 * @return mixed
	 */
	public function make() {
	
	}
	
	/**
	 * 从缓存读取
	 */
	public function fromCache() {
	
	}
	
	/**
	 * 写入缓存
	 */
	public function toCache() {
	
	}
	
	/**
	 * 缓存是否存在
	 * @return bool
	 */
	public function hasCache(): bool {
		return false;
	}
	
	/**
	 * 清空缓存
	 */
	public function clearCache() {
	
	}
	
	/**************************************************************
	 * get set
	 **************************************************************/
	
	/**
	 * @return EventName
	 */
	public function getEventNameObj(): EventName {
		return $this->_eventNameObj;
	}
	
	/**
	 * @param EventName $eventNameObj
	 *
	 * @return $this
	 */
	public function setEventNameObj(EventName $eventNameObj) {
		$this->_eventNameObj = $eventNameObj;
		
		return $this;
	}
	
	
	
	
}